{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","props","GetAnimeList","a","fetch","then","res","json","setState","data","state","animeTitle","title","animeUpdate","update","animeLegend","legend","animeList","anime","GetAnimeIMG","aniURL","aniIMG","aniSYN","anititle","title1","split","join","url","push","results","item","image_url","synopsis","animeURL","animeIMG","animeSYN","AnimeHeader","aniTitle","aniUpdate","aniLegend","id","className","AnimeDisplay","onClick","viewListMode","loadingIMGMode","Tooltip","disableFocusListener","placement","AnimeListMode","int","listFinal","title2","titleL","slice","titleR","AnimeIMGMode","i","imgFinal","aniImg","aniSyn","src","alt","AnimeFooter","count","length","href","animeTYP","animeEPS","loadingAniFlex","this","color","size","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcf99941.chunk.js","sourcesContent":["import React from 'react';\nimport './css/main.css';\n\n// Material UI Icons & Spinner\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport KeyboardArrowUpOutlinedIcon from '@material-ui/icons/KeyboardArrowUpOutlined';\nimport HashLoader from \"react-spinners/HashLoader\";\nimport { Tooltip } from '@material-ui/core';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: [],\n      animeTitle: '',\n      animeUpdate: '',\n      animeLegend: '',\n      animeList: [],\n      animeURL: [],\n      animeIMG: [],\n      animeSYN: [],\n      animeTYP: [],\n      animeEPS: [],\n      viewListMode: true,\n      loadingAniFlex: true,\n      loadingIMGMode: true\n    }\n  }\n\n  async componentDidMount() {\n    await this.GetAnimeList()\n    this.setState({ loadingAniFlex: false })\n    await this.GetAnimeIMG()\n    this.setState({ loadingIMGMode: false })\n  }\n\n  // Retrieve Anime Title (Local API)\n  GetAnimeList = async () => {\n    // const list = \"http://localhost:3000/data/list.json\"\n    const list = \"https://s20016.github.io/AniFlex/data/list.json\"\n    await fetch(list)\n      .then(res => res.json())\n      .then(json => this.setState({ data: json}))\n\n    const data = this.state.data\n    this.setState({\n      animeTitle: data.title,\n      animeUpdate: data.update,\n      animeLegend: data.legend,\n      animeList: data.anime,\n    })\n  }\n\n  // Retrieve Anime Image (Jikan API)\n  GetAnimeIMG = async () => {\n    let data = []\n    let aniURL = []\n    let aniIMG = []\n    let aniSYN = []\n    // let aniTYP = []\n    // let aniEPS = []\n    \n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0].split(\" \").join(\"%20\")\n      const url = `https://api.jikan.moe/v3/search/anime?q=${title1}&limit=1`\n      aniURL.push(url)\n    }\n\n    for (const url of aniURL) {\n      await fetch(url)\n        .then(res => res.json())\n        .then(json => data.push(json.results[0]))\n    }\n\n    for (const item in data) {\n      aniIMG.push(data[item].image_url)\n      aniSYN.push(data[item].synopsis)\n      // aniTYP.push(data[item].type)\n      // aniEPS.push(data[item].episodes)\n    }\n\n    this.setState({\n        animeURL: aniURL,\n        animeIMG: aniIMG,\n        animeSYN: aniSYN,\n        // animeTYP: aniTYP,\n        // animeEPS: aniEPS\n    })\n  }\n\n  // Anime Title and Description\n  AnimeHeader = () => {\n    const aniTitle = this.state.animeTitle\n    const aniUpdate = this.state.animeUpdate\n    const aniLegend = this.state.animeLegend\n\n    return (\n      <>\n        <header id=\"title\">\n          <div className=\"mainHeader\">\n            {aniTitle}\n          </div>\n        </header>\n\n        <section className=\"subHeader\">\n          <div className=\"update\">\n            <p>Updated: {aniUpdate}</p>\n          </div>\n          <div className=\"legend\">\n            <ul>\n              <li className=\"legendM\">{aniLegend[0]}</li>\n              <li className=\"legendR\">{aniLegend[1]}</li>\n            </ul>\n          </div>\n        </section>\n      </>\n    )\n  }\n\n  // Anime Display Item\n  AnimeDisplay = () => {\n    return (\n      <div className=\"display\">\n        <button className=\"displayList\" onClick={() => {\n            this.setState({ viewListMode: true }) }}>\n          <ViewHeadlineIcon/>\n        </button>\n        { this.state.loadingIMGMode\n          ? <Tooltip disableFocusListener \n              title=\"Image View is not yet available\" placement=\"top\">\n            <div className=\"displayLoad\"><HighlightOffIcon/></div>\n            </Tooltip>\n          : <button className=\"displayImg\" onClick={() => {\n            this.setState({ viewListMode: false }) }}>\n              <ViewListIcon/>\n            </button>\n        } \n      </div>\n    )\n  }\n\n  // Anime (List Mode)\n  AnimeListMode = () => {\n    let int = 0\n    let listFinal = []\n\n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0]\n      const title2 = anititle[1]\n      const titleL = anititle[2].slice(0, 1)\n      const titleR = anititle[2].slice(1, 2)\n      if (titleR > 1) {\n        listFinal.push(\n          <li key={int} className={titleL}>\n              {title1}{title2}\n              <span className=\"R\">{titleR}</span>\n          </li>)\n      } else {\n        listFinal.push(\n          <li key={int} className={titleL}>\n            {title1}{title2}\n            <span className=\"R\"></span>\n          </li>)\n      }\n      int += 1\n    }\n    return (\n      <div className=\"aniList\">\n        {listFinal}\n      </div>\n    )\n  }\n\n  // Anime (Image Mode)\n  AnimeIMGMode = () => {\n    let i = 0\n    let imgFinal = []\n\n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0]\n      const title2 = anititle[1]\n      const titleL = anititle[2].slice(0, 1)\n      const titleR = anititle[2].slice(1, 2)\n      const aniImg = this.state.animeIMG\n      // const aniTyp = this.state.animeTYP\n      // const aniEps = this.state.animeEPS\n      const aniSyn = this.state.animeSYN\n\n      imgFinal.push(\n        <div className=\"aniImgBanner\" key={i}>\n          <div className=\"cardImgCon\">\n            <img className=\"cardImg\" src={aniImg[i]} alt={i}/>\n          </div>\n          <div className=\"cardTitleCon\">\n            <h1 className={`cardTitle ${titleL}`}>\n              {title1}{title2}\n            </h1>\n            <div className=\"cardType\">\n              {titleL === \"M\"\n                ? <span className=\"M\">Movie</span>\n                : <span className=\"T\">TV</span>\n              }\n              {titleR === \"2\"\n                ? <span className=\"R\">{titleR} REWATCH</span>\n                : <span className=\"R\"></span>\n              }\n              {/* <span className=\"L\"> {titleL}</span> */}\n              {/* <span className=\"\"> {aniTyp[i]}</span> */}\n              {/* <span className=\"\"> {aniEps[i]} episodes</span> */}\n            </div>\n            <div className=\"cardSynopsis\">{aniSyn[i]}</div>\n          </div>\n        </div>\n      )\n      i += 1\n    }\n\n    return <div className=\"aniIMG\">{imgFinal}</div>\n  }\n\n  // Footer\n  AnimeFooter = () => {\n    const count = this.state.animeList.length\n    return (\n      <div className=\"footer\">\n        <div className=\"total\">\n          <p className=\"count\">{count} Anime</p>\n        </div>\n        <div className=\"btt\">\n          <a href=\"#title\" className=\"gotopbtn\">\n            <KeyboardArrowUpOutlinedIcon className=\"btn\" />\n          </a>\n        </div>\n      </div>\n    )\n  }\n\n  // Main\n  render() {\n    return (\n      this.state.loadingAniFlex\n        ? <div className=\"load\">\n          <HashLoader color={\"#70D7FF\"} size={50}/>\n          <p>AniFlex</p>\n          </div>\n        : <>\n          <this.AnimeHeader/>\n          <this.AnimeDisplay/>\n          {this.state.viewListMode \n            ? <this.AnimeListMode/> \n            : <this.AnimeIMGMode />}\n          <this.AnimeFooter/>\n          </>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}