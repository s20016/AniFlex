{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","props","GetAnimeList","a","fetch","then","res","json","setState","data","state","animeUpdate","update","animeList","anime","GetAnimeIMG","aniURL","aniIMG","aniSYN","anititle","title1","split","join","url","push","results","item","image_url","synopsis","animeURL","animeIMG","animeSYN","AnimeHeader","aniUpdate","id","className","AnimeDisplay","onClick","viewListMode","loadingIMGMode","Tooltip","title","placement","arrow","AnimeListMode","int","listFinal","title2","titleL","slice","titleR","AnimeIMGMode","i","imgFinal","aniImg","aniSyn","src","alt","AnimeFooter","count","length","href","animeTYP","animeEPS","loadingAnimate","this","color","size","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f57bf978.chunk.js","sourcesContent":["import React from 'react';\nimport './css/main.css';\n\n// Material UI Icons & Spinner\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport KeyboardArrowUpOutlinedIcon from '@material-ui/icons/KeyboardArrowUpOutlined';\nimport HashLoader from \"react-spinners/HashLoader\";\nimport { Tooltip } from '@material-ui/core';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: [],\n      animeUpdate: '',\n      animeList: [],\n      animeURL: [],\n      animeIMG: [],\n      animeSYN: [],\n      animeTYP: [],\n      animeEPS: [],\n      viewListMode: true,\n      loadingAnimate: true,\n      loadingIMGMode: true\n    }\n  }\n\n  async componentDidMount() {\n    await this.GetAnimeList()\n    this.setState({ loadingAnimate: false })\n    await this.GetAnimeIMG()\n    this.setState({ loadingIMGMode: false })\n  }\n\n  // Retrieve Anime Title (Local API)\n  GetAnimeList = async () => {\n    // const list = \"http://localhost:3000/data/list.json\"\n    const list = \"https://s20016.github.io/Animate/data/list.json\"\n    await fetch(list)\n      .then(res => res.json())\n      .then(json => this.setState({ data: json}))\n\n    const data = this.state.data\n    this.setState({\n      animeUpdate: data.update,\n      animeList: data.anime\n    })\n  }\n\n  // Retrieve Anime Image (Jikan API)\n  GetAnimeIMG = async () => {\n    let data = []\n    let aniURL = []\n    let aniIMG = []\n    let aniSYN = []\n    \n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0].split(\" \").join(\"%20\")\n      const url = `https://api.jikan.moe/v3/search/anime?q=${title1}&limit=1`\n      aniURL.push(url)\n    }\n\n    for (const url of aniURL) {\n      await fetch(url)\n        .then(res => res.json())\n        .then(json => data.push(json.results[0]))\n    }\n\n    for (const item in data) {\n      aniIMG.push(data[item].image_url)\n      aniSYN.push(data[item].synopsis)\n    }\n\n    this.setState({\n        animeURL: aniURL,\n        animeIMG: aniIMG,\n        animeSYN: aniSYN\n    })\n  }\n\n  // Anime Title and Description\n  AnimeHeader = () => {\n    const aniUpdate = this.state.animeUpdate\n\n    return (\n      <>\n        <header id=\"title\">\n          <div className=\"mainHeader\">Anime List</div>\n        </header>\n\n        <section className=\"subHeader\">\n          <div className=\"update\">\n            <p>Updated: {aniUpdate}</p>\n          </div>\n          <div className=\"legend\">\n            <ul>\n              <li className=\"legendM\">Movie</li>\n              <li className=\"legendR\">Watch Count</li>\n            </ul>\n          </div>\n        </section>\n      </>\n    )\n  }\n\n  // Anime Display Item\n  AnimeDisplay = () => {\n    return (\n      <div className=\"display\">\n        <button className=\"displayList\" onClick={() => {\n            this.setState({ viewListMode: true }) }}>\n          <ViewHeadlineIcon/>\n        </button>\n        { this.state.loadingIMGMode\n          ? <Tooltip\n              title=\"Image View is not yet available\" placement=\"top\" arrow>\n              <div className=\"displayLoad\"><HighlightOffIcon/></div>\n            </Tooltip>\n          : <button className=\"displayImg\" onClick={() => {\n              this.setState({ viewListMode: false }) }}>\n              <ViewListIcon/>\n            </button> } \n      </div>\n    )\n  }\n\n  // Anime (List Mode)\n  AnimeListMode = () => {\n    let int = 0\n    let listFinal = []\n\n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0]\n      const title2 = anititle[1]\n      const titleL = anititle[2].slice(0, 1)\n      const titleR = anititle[2].slice(1, 2)\n      listFinal.push(\n        <li key={int} className={titleL}>\n          {title1}{title2}\n          { (titleR > 1)\n            ? <span className=\"R\">{titleR}</span>\n            : <span className=\"R\"></span>\n          }\n        </li>\n      ); int += 1\n    }\n\n    return <div className=\"aniList\">{listFinal}</div>\n  }\n\n  // Anime (Image Mode)\n  AnimeIMGMode = () => {\n    let i = 0\n    let imgFinal = []\n\n    for (const anititle of this.state.animeList) {\n      const title1 = anititle[0]\n      const title2 = anititle[1]\n      const titleL = anititle[2].slice(0, 1)\n      const titleR = anititle[2].slice(1, 2)\n      const aniImg = this.state.animeIMG\n      const aniSyn = this.state.animeSYN\n\n      imgFinal.push(\n        <div className=\"aniImgBanner\" key={i}>\n          <div className=\"cardImgCon\">\n            <img className=\"cardImg\" src={aniImg[i]} alt={i}/>\n          </div>\n          <div className=\"cardTitleCon\">\n            <h1 className={`cardTitle ${titleL}`}>\n              {title1}{title2}\n            </h1>\n            <div className=\"cardType\">\n              { (titleL === \"M\")\n                ? <span className=\"M\">Movie</span>\n                : <span className=\"T\">TV</span>\n              }\n              { (titleR >= \"2\")\n                ? <span className=\"R\">{titleR} Rewatch</span>\n                : <span className=\"R\"></span>\n              }\n            </div>\n            <div className=\"cardSynopsis\">{aniSyn[i]}</div>\n          </div>\n        </div>\n      ); i += 1\n    }\n\n    return <div className=\"aniIMG\">{imgFinal}</div>\n  }\n\n  // Footer\n  AnimeFooter = () => {\n    const count = this.state.animeList.length\n    return (\n      <div className=\"footer\">\n        <div className=\"total\">\n          <p className=\"count\">{count} Anime</p>\n        </div>\n        <div className=\"btt\">\n          <a href=\"#title\" className=\"gotopbtn\">\n            <KeyboardArrowUpOutlinedIcon className=\"btn\" />\n          </a>\n        </div>\n      </div>\n    )\n  }\n\n  // Main\n  render() {\n    return (\n      this.state.loadingAnimate\n        ? <div className=\"load\">\n            <HashLoader color={\"#70D7FF\"} size={50}/>\n            <p>Animate</p>\n          </div>\n        : <>\n            <this.AnimeHeader/>\n            <this.AnimeDisplay/>\n            { this.state.viewListMode \n              ? <this.AnimeListMode/> \n              : <this.AnimeIMGMode />\n            }\n            <this.AnimeFooter/>\n          </>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}